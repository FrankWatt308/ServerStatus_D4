@page "/"

@using DataLibrary1
@using ServerStatus_D4.Models
@using Microsoft.Extensions.Configuration
@using Havit.Blazor
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using Havit.Model;

@*@using Syncfusion.Blazor
    @using Syncfusion.Blazor.Calendars*@

@inject IServerDataAccess _data
@inject IConfiguration _config




<h1>Dashboard</h1>


<div class="sticky-top">
    @if (@pingTime <= 20)
    {
        <div class="alert alert-success" role="alert" style="z-index:-1 ; position: static">
            <a href="#" class="alert-link">Server is running </a>
            <i class="bi bi-circle-fill" style="color:forestgreen"></i>
        </div>
    }

    else if (@pingTime <= 30)
    {
        <div class="alert alert-warning" role="alert" style="z-index:-1 ; position: static">
            <a href="#" class="alert-link">Server unsatable </a>
            <i class="bi bi-circle-fill" style="color:orangered"></i>
        </div>

    }
    else if (@pingTime > 60)
    {
        <div class="alert alert-danger" role="alert" style="z-index:-1 ; position: static">
            <a href="#" class="alert-link">Server Down </a>
            <i class="bi bi-circle-fill" style="color:red"></i>
        </div>

    }

</div>




<div class="row" style="padding-right:5px">
    <div class="col-xl-6 col-md-5 mb-5" style="padding:5px,5px,5px">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center" style="width:90vw 90vh">
                    <h3>List of all scheduled Connections : </h3>
                    <h4>You can select a row to see processes</h4>
                    <br />

                    @if (server == null)
                    {
                        <p><em>Loading...</em></p>

                    }
                    else
                    {

                        <div class="table-responsive" style="width:90vw ">
                            <table class="table ; table-hover table-dark">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>ClientID</th>
                                        <td>Startdate</td>
                                        <td>EndDate</td>
                                        <td>RefineType</td>
                                        <td>Handled</td>
                                        <td>ScheduledTime</td>


                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var p in server)
                                    {
                                        DateTime myDate = p.EndDate;
                                        <tr @onclick="()=>getSelected(myDate)">
                                            <td>@p.ID</td>
                                            <td>@p.ClientID</td>
                                            <td>@p.Startdate</td>
                                            <td>@p.EndDate</td>
                                            <td>@p.RefineType</td>
                                            <td>@p.Handled</td>
                                            <td>@p.ScheduledTime</td>






                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>



                    }
                    <button class="btn btn-outline-info" @onclick="getScheduledRecords">See Scheduled transactions </button>
                    <span></span>
                    <button class="btn btn-outline-info" @onclick="getHandledRecodrs">See Handled transactions</button>
                    <span></span>
                    <hr style="width:10px" />
                </div>
            </div>
        </div>
    </div>


    <div class="col-xl-5 col-md-5 mb-5" style="padding:5px,5px,5px">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">


                    @if (server1 == null)
                    {
                        <p><em>Loading...</em></p>

                    }
                    else
                    {
                        @if (isSelected)
                        {
                            <h3> "Showing results for selected item:"@selectedDate</h3>

                        }
                        else
                        {
                            <h3>Latest Message Log :</h3>

                        }

                        <div class="table-responsive">
                            <table class="table" style="width:auto">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>ClientID</th>
                                        <th>Date</th>
                                        <th>Message</th>


                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var p in server1)
                                    {
                                        <tr>
                                            <td>@p.ID</td>
                                            <td>@p.ClientID</td>
                                            <td>@p.DateTime</td>


                                            @if (p.Message.Contains("success"))
                                            {
                                                <td><label class="form-label" style="background-color: forestgreen;color: white;border-radius: 10px;"> @p.Message </label></td>

                                            }

                                            else
                                            {
                                                <td>@p.Message</td>
                                            }

                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @if (errCheck)
                            {
                                <button class="btn btn-outline-danger" @onclick="getErrorRecords">See Error records </button>
                            }
                            @if (errCheck == false || isSelected)
                            {
                                <button class="btn btn-outline-dark" @onclick="resetMsgLog">Refresh Log </button>
                            }



                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>










<div class="row" style="padding-right:5px">
    <div class="col-xl-6 col-md-6 mb-4" style="padding:5px,5px,5px">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center" style="width: 90vw 90vh">
                    <h3>Last 5 pings : </h3>


                    @if (server3 == null)
                    {
                        <p><em>Loading...</em></p>

                    }
                    else
                    {

                        <table class="table ">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>ClientID</th>
                                    <th>Date</th>


                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var p in server3)
                                {
                                    <tr>
                                        <td>@p.ID</td>
                                        <td>@p.ClientID</td>
                                        <td>@p.Date</td>


                                    </tr>
                                }
                            </tbody>
                        </table>

                        <button class="btn btn-info" @onclick="getMoreEntries">See more entries </button>
                        <br />
                        <br />
                        <button class="btn btn-info" @onclick="getFewerEntries">See fewer entries </button>
                        <br />
                        <br />
                        <hr />


                    }

                </div>
            </div>
        </div>
    </div>


    <div class="col-xl-6 col-md-6 mb-4" style="padding:5px,5px,5px">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center" style="width: 90vw 90vh">
                    <h3>User changes : </h3>

                    <div class="table" style="position:center; padding:5px,5px,5px,5px">
                        <button id="btn1" class="btn btn-dark" disabled="@isDisabled" @onclick="createSchedule">Create a Schedule </button>

                        <button class="btn btn-dark" @onclick="pushProcesses">Push processes </button>

                        <button class="btn btn-dark" @onclick="changeTimeLimits">Chage time limmits  </button>
                    </div>
                    <hr style="width:90%;text-align:left;margin-left:0">

                    @if (isCreateSchedule)
                    {
                        <div class="table">
                            <input placeholder="Name of Process" type="text" /><br />
                            <br />
                            <input placeholder="Enter date and time scheduled" type="datetime" /><br />
                            <br />
                            <button class="btn btn-success" data-toggle="tooltip" data-placement="bottom" title="Tooltip on bottom">Submit </button>
                            <br />




                        </div>

                    }
                    @if (isPushed)
                    {
                        <div class="table">
                            <input placeholder="Name of push event " /><br />
                            <br />
                            <button class="btn btn-success">Push  </button>


                        </div>


                    }
                    @if (isChangeTimeLimits)
                    {
                        <div class="table">
                            <input placeholder="Change Time Limit  " type="time" /><br />
                            <br />
                            <button class="btn btn-success">Submit </button>


                        </div>
                        @*<SfDatePicker TValue="DateTime?" Placeholder='Choose a Date'></SfDatePicker>*@
                             <HxInputDate Label="Date" @bind-Value="@value" />


                    }




                </div>
            </div>
        </div>
    </div>
</div>






@code {


    public DateTime value { get; set; }


    List<ServerModel> server;
    public string sql1;
    public string sql2;
    public DateTime selected;
    public string sql3;
    public bool isSelected = false;

    public bool errCheck = true;

    List<ServerModel> server1;

    List<ServerModel> server3;
    public double pingTime;
    public string selectedDate;
    public bool checkSuccessfull;
    public double ServerError;
    public double errorTime;

    public bool isCreateSchedule = false;
    public bool isPushed = false;
    public bool isChangeTimeLimits = false;
    public bool isDisabled { get; set; }

    ElementReference btn1;







    protected override async Task OnInitializedAsync()
    {
        sql1 = "select top 5 * from HVAC_EnergyManagementSchedule where Handled=0 order by Id desc";
        server = await _data.LoadData<ServerModel, dynamic>(sql1, new { }, _config.GetConnectionString("default"));


        string sql2 = "select top 5 * from HVAC_LogMessage order by Id desc";
        server1 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));

        await conn();

        getLastEntry();



    }
    public async Task getSelected()
    {
        string sql2 = "select  * from HVAC_LogMessage where DateTime =" + selected + " order by Id desc";
        server1 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));

    }

    public async Task getHandledRecodrs()
    {
        sql1 = "select * from HVAC_EnergyManagementSchedule where Handled =1 order by Id desc ";
        server = await _data.LoadData<ServerModel, dynamic>(sql1, new { }, _config.GetConnectionString("default"));


    }
    public async Task getScheduledRecords()
    {
        sql1 = "select * from HVAC_EnergyManagementSchedule where Handled=0 order by Id desc";
        server = await _data.LoadData<ServerModel, dynamic>(sql1, new { }, _config.GetConnectionString("default"));

    }
    public async Task getErrorRecords()
    {
        string sql2 = "select * from HVAC_LogMessage where Message like'%Exception%' order by Id desc";
        server1 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
        errCheck = false;
        selectedDate = "";
    }

    public async Task resetMsgLog()
    {
        string sql2 = "select top 5 * from HVAC_LogMessage order by Id desc";
        server1 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
        errCheck = true;
        selectedDate = "";
        isSelected = false;
    }


    public double getLastEntry()
    {


        DateTime LastEntry = server3[0].Date;
        DateTime SecondLatEntry = server3[1].Date;

        pingTime = ((LastEntry - SecondLatEntry).TotalMinutes);


        return pingTime;



    }
    public async Task conn()
    {
        string sql2 = "select top 5  * from HVAC_PollLog order by Date desc ";
        server3 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
        //getLastEntry();




    }

    public async Task getMoreEntries()
    {
        string sql2 = "select top 20  * from HVAC_PollLog order by Id desc ";
        server3 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
    }

    public async Task getFewerEntries()
    {
        string sql2 = "select top 5 * from HVAC_PollLog order by Id desc ";
        server3 = await _data.LoadData<ServerModel, dynamic>(sql2, new { }, _config.GetConnectionString("default"));
    }

    public async Task getSelected(DateTime myDate)
    {
        sql3 = "select  * from HVAC_LogMessage where DATEPART(year,DateTime) = '" + myDate.Year + "' and DatePart(month,DateTime) = '" + myDate.Month + "' and DATEPART(day,DateTime) = '" + myDate.Day + "' order by Id desc";

        //sql3 = "select  * from HVAC_LogMessage where  CONVERT(VARCHAR(50),[DateTime],23) like '%" + myDate.Date.ToString("yyyy-MM-dd") + "%'";
        server1 = await _data.LoadData<ServerModel, dynamic>(sql3, new { }, _config.GetConnectionString("default"));
        isSelected = true;
        selectedDate = myDate.ToString("yyyy-MM-dd");


    }

    public async Task createSchedule()
    {
        isCreateSchedule = true;
        isPushed = false;
        isChangeTimeLimits = false;
        isDisabled = true;

    }
    public async Task pushProcesses()
    {
        isPushed = true;
        isChangeTimeLimits = false;
        isCreateSchedule = false;
        isDisabled = false;
    }

    public async Task changeTimeLimits()
    {
        isChangeTimeLimits = true;
        isPushed = false;
        isCreateSchedule = false;
        isDisabled = false;


    }



}










